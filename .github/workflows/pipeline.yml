name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Clonar el repositorio
      - uses: actions/checkout@v4

      # Paso 2: Configurar Node.js (ajusta la versión según lo necesario)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Paso 3: Instalar dependencias
      - name: Install dependencies
        run: npm install

      # Paso 4: Ejecutar las pruebas
      - name: Run tests
        run: npm test
        continue-on-error: true  # Esto permite continuar con el flujo aunque las pruebas fallen

  sonar:
    name: SonarQube Analysis
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Clonar el repositorio
      - uses: actions/checkout@v4

      # Paso 2: Configurar Node.js (ajustar si es necesario, si tu proyecto usa Node.js)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Paso 3: Ejecutar el análisis de SonarQube
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v3
        with:
          args: >
            -Dsonar.projectKey=PruebaCalidad
            -Dsonar.sources=.
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
